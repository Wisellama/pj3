#BlueJ class context
comment0.params=
comment0.target=Set()
comment0.text=\n\ \ Constructs\ an\ empty\ Set.\ \n\n\ \ Performance\:\ \ runs\ in\ O(1)\ time.\n
comment1.params=
comment1.target=int\ cardinality()
comment1.text=\n\ \ cardinality()\ returns\ the\ number\ of\ elements\ in\ this\ Set.\n\n\ \ Performance\:\ \ runs\ in\ O(1)\ time.\n
comment2.params=c
comment2.target=void\ insert(java.lang.Comparable)
comment2.text=\n\ \ insert()\ inserts\ a\ Comparable\ element\ into\ this\ Set.\n\n\ \ Sets\ are\ maintained\ in\ sorted\ order.\ \ The\ ordering\ is\ specified\ by\ the\n\ \ compareTo()\ method\ of\ the\ java.lang.Comparable\ interface.\n\n\ \ Performance\:\ \ runs\ in\ O(this.cardinality())\ time.\n
comment3.params=s
comment3.target=void\ union(Set)
comment3.text=\n\ \ union()\ modifies\ this\ Set\ so\ that\ it\ contains\ all\ the\ elements\ it\n\ \ started\ with,\ plus\ all\ the\ elements\ of\ s.\ \ The\ Set\ s\ is\ NOT\ modified.\n\ \ Make\ sure\ that\ duplicate\ elements\ are\ not\ created.\n\n\ \ Performance\:\ \ Must\ run\ in\ O(this.cardinality()\ +\ s.cardinality())\ time.\n\n\ \ Your\ implementation\ should\ NOT\ copy\ elements\ of\ s\ or\ "this",\ though\ it\n\ \ will\ copy\ _references_\ to\ the\ elements\ of\ s.\ \ Your\ implementation\ will\n\ \ create\ new\ _nodes_\ for\ the\ elements\ of\ s\ that\ are\ added\ to\ "this",\ but\n\ \ you\ should\ reuse\ the\ nodes\ that\ are\ already\ part\ of\ "this".\n\n\ \ DO\ NOT\ MODIFY\ THE\ SET\ s.\n\ \ DO\ NOT\ ATTEMPT\ TO\ COPY\ ELEMENTS;\ just\ copy\ _references_\ to\ them.\n
comment4.params=s
comment4.target=void\ intersect(Set)
comment4.text=\n\ \ intersect()\ modifies\ this\ Set\ so\ that\ it\ contains\ the\ intersection\ of\n\ \ its\ own\ elements\ and\ the\ elements\ of\ s.\ \ The\ Set\ s\ is\ NOT\ modified.\n\n\ \ Performance\:\ \ Must\ run\ in\ O(this.cardinality()\ +\ s.cardinality())\ time.\n\n\ \ Do\ not\ construct\ any\ new\ ListNodes\ during\ the\ execution\ of\ intersect.\n\ \ Reuse\ the\ nodes\ of\ "this"\ that\ will\ be\ in\ the\ intersection.\n\n\ \ DO\ NOT\ MODIFY\ THE\ SET\ s.\n\ \ DO\ NOT\ CONSTRUCT\ ANY\ NEW\ NODES.\n\ \ DO\ NOT\ ATTEMPT\ TO\ COPY\ ELEMENTS.\n
comment5.params=
comment5.target=java.lang.String\ toString()
comment5.text=\n\ \ toString()\ returns\ a\ String\ representation\ of\ this\ Set.\ \ The\ String\ must\n\ \ have\ the\ following\ format\:\n\ \ \ \ {\ \ }\ for\ an\ empty\ Set.\ \ No\ spaces\ before\ "{"\ or\ after\ "}";\ two\ spaces\n\ \ \ \ \ \ \ \ \ \ \ \ between\ them.\n\ \ \ \ {\ \ 1\ \ 2\ \ 3\ \ }\ for\ a\ Set\ of\ three\ Integer\ elements.\ \ No\ spaces\ before\n\ \ \ \ \ \ \ \ \ \ \ \ "{"\ or\ after\ "}";\ two\ spaces\ before\ and\ after\ each\ element.\n\ \ \ \ \ \ \ \ \ \ \ \ Elements\ are\ printed\ with\ their\ own\ toString\ method,\ whatever\n\ \ \ \ \ \ \ \ \ \ \ \ that\ may\ be.\ \ The\ elements\ must\ appear\ in\ sorted\ order,\ from\n\ \ \ \ \ \ \ \ \ \ \ \ lowest\ to\ highest\ according\ to\ the\ compareTo()\ method.\n\n\ \ WARNING\:\ \ THE\ AUTOGRADER\ EXPECTS\ YOU\ TO\ PRINT\ SETS\ IN\ _EXACTLY_\ THIS\n\ \ \ \ \ \ \ \ \ \ \ \ FORMAT,\ RIGHT\ UP\ TO\ THE\ TWO\ SPACES\ BETWEEN\ ELEMENTS.\ \ ANY\n\ \ \ \ \ \ \ \ \ \ \ \ DEVIATIONS\ WILL\ LOSE\ POINTS.\n
comment6.params=argv
comment6.target=void\ main(java.lang.String[])
numComments=7
